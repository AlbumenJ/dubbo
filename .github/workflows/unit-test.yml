name: Unit Test

on: [push, pull_request]

env:
  FORK_COUNT: 2
  FAIL_FAST: 0
  SHOW_ERROR_DETAIL: 1
  #multi-version size limit
  VERSIONS_LIMIT: 4

jobs:
  unit-test:
    name: "Unit Test On ${{ matrix.os }} (JDK: ${{ matrix.jdk }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-18.04, windows-2019 ]
        jdk: [ 8, 11 ]
    steps:
      - uses: actions/checkout@v2
      - name: "Set up JDK ${{ matrix.jdk }}"
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.jdk }}
      - uses: actions/cache@v2
        name: "Cache local Maven repository"
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
      - name: "Dubbo cache"
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository/org/apache/dubbo
          key: ${{ runner.os }}-dubbo-snapshot
      - name: Test with Maven with Integration Tests
        if: ${{ startsWith( matrix.os, 'ubuntu') }}
        run: ./mvnw --batch-mode --no-transfer-progress clean install -D"maven.wagon.http.retryHandler.count=5" -DskipTests=false -DskipIntegrationTests=true -D"checkstyle.skip=false" -D"rat.skip=false" -D"maven.javadoc.skip=true"
      - name: Test with Maven without Integration Tests
        if: ${{ startsWith( matrix.os, 'windows') }}
        run: ./mvnw --batch-mode --no-transfer-progress clean install -D"maven.wagon.http.retryHandler.count=5" -DskipTests=false -DskipIntegrationTests=true -D"checkstyle.skip=false" -D"rat.skip=false" -D"maven.javadoc.skip=true"
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1

  version-save:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Fetch Dubbo version
        run: |
          REVISION=`awk '/<revision>[^<]+<\/revision>/{gsub(/<revision>|<\/revision>/,"",$1);print $1;exit;}' pom.xml`
          echo $REVISION > dubbo-version
      - name: Upload Dubbo version
        uses: actions/upload-artifact@v2
        with:
          name: dubbo-version
          path: dubbo-version

  integration-test-prepare:
    runs-on: ubuntu-18.04
    env:
      JOB_COUNT: 3
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'apache/dubbo-samples'
          ref: master
      - name: "Prepare test list"
        run: |
          bash ./test/scripts/prepare-test.sh
      - name: "Upload test list"
        uses: actions/upload-artifact@v2
        with:
          name: test-list
          path: test/jobs

  integration-test-job:
    needs: [unit-test, integration-test-prepare, version-save]
    runs-on: ubuntu-18.04
    env:
      JAVA_VER: ${{matrix.java}}
      TEST_CASE_FILE: jobs/testjob_${{matrix.job_id}}.txt
    strategy:
      fail-fast: false
      matrix:
        java: [8, 11]
        job_id: [1, 2, 3]
    steps:
      - uses: actions/checkout@v1
        with:
          repository: 'apache/dubbo-samples'
          ref: master
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Dubbo cache
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository/org/apache/dubbo
          key: ${{ runner.os }}-dubbo-snapshot
          restore-keys: |
            ${{ runner.os }}-dubbo-
      - name: Download test list
        uses: actions/download-artifact@v2
        with:
          name: test-list
          path: test/jobs/
      - name: Download Dubbo version
        uses: actions/download-artifact@v2
        with:
          name: dubbo-version
          path: dubbo-version
      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v1
        with:
          java-version: ${{matrix.java}}
      - name: Init Candidate Versions
        run: |
          DUBBO_VERSION=`cat dubbo-version`
          CANDIDATE_VERSIONS='dubbo.version:'$DUBBO_VERSION';spring.version:4.3.30.RELEASE;spring-boot.version:1.5.22.RELEASE;spring-boot.version:2.4.1;'
      - name: Build test image
        run: |
          cd test && bash ./build-test-image.sh
      - name: Run tests
        run: cd test && bash ./run-tests.sh
      - name: Upload test result
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-result
          path: test/jobs/*-result*

  integration-test-result:
    needs: [integration-test-job]
    if: always()
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        java: [8, 11]
    env:
      JAVA_VER: ${{matrix.java}}
    steps:
      - uses: actions/checkout@v1
      - name: Download test result
        uses: actions/download-artifact@v2
        with:
          name: test-result
          path: test/jobs/
      - name: Merge test result - java ${{matrix.java}}
        run: ./test/scripts/merge-test-results.sh
